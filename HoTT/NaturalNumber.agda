{-# OPTIONS --without-K #-}
module HoTT.NaturalNumber where

open import HoTT.Base renaming (_+_ to _‚äé_)
open import HoTT.Identity

private variable n m : ‚Ñï

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
0 + m = m
succ n + m = succ (n + m)

+-comm : (n m : ‚Ñï) ‚Üí n + m == m + n
+-comm zero zero = refl
+-comm zero (succ m) = ap succ (+-comm zero m)
+-comm (succ n) zero = ap succ (+-comm n zero)
+-comm (succ n) (succ m) = ap succ $
  n + succ m   =‚ü® +-comm n (succ m) ‚ü©
  succ m + n   =‚ü® ap (succ) (+-comm m n) ‚ü©
  succ (n + m) =‚ü® +-comm (succ n) m ‚ü©
  m + succ n   ‚àé
  where open =-Reasoning

_‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùí∞‚ÇÄ
n ‚â§ m = Œ£ ‚Ñï Œª k ‚Üí n + k == m

‚â§succ : n ‚â§ m ‚Üí n ‚â§ succ m
‚â§succ {n} (k , p) = succ k , +-comm n (succ k) ‚àô ap succ (+-comm k n ‚àô p)

_<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùí∞‚ÇÄ
n < m = succ n ‚â§ m

_<=>_ : (n m : ‚Ñï) ‚Üí (n == m) ‚äé (n < m) ‚äé (m < n)
zero <=> zero = inl refl
zero <=> succ m = inr (inl (m , refl))
succ n <=> zero = inr (inr (n , refl))
succ n <=> succ m with n <=> m
... | inl p = inl (ap succ p)
... | inr (inl (k , p)) = inr (inl (k , ap succ p))
... | inr (inr (k , p)) = inr (inr (k , ap succ p))
