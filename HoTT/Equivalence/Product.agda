{-# OPTIONS --without-K #-}
open import HoTT.Base
open import HoTT.Equivalence
open import HoTT.Identity.Product

module HoTT.Equivalence.Product where

private
  variable
    i : Level
    A A' B B' : ùí∞ i

√ó-swap : A √ó B ‚Üí B √ó A
√ó-swap x = pr‚ÇÇ x , pr‚ÇÅ x

√ó-comm : A √ó B ‚âÉ B √ó A
√ó-comm = √ó-swap , qinv‚Üíisequiv (√ó-swap , √ó-uniq , √ó-uniq)

√ó-equiv‚ÇÅ : A ‚âÉ A' ‚Üí A √ó B ‚âÉ A' √ó B
√ó-equiv‚ÇÅ {A = A} {A' = A'} {B = B} (f‚ÇÅ , e‚ÇÅ) = f , qinv‚Üíisequiv (g , Œ∑ , Œµ)
  where
  open qinv (isequiv‚Üíqinv e‚ÇÅ) renaming (g to g‚ÇÅ ; Œ∑ to Œ∑‚ÇÅ ; Œµ to Œµ‚ÇÅ)
  f : A √ó B ‚Üí A' √ó B
  f (a , b) = f‚ÇÅ a , b
  g : A' √ó B ‚Üí A √ó B
  g (a' , b) = g‚ÇÅ a' , b
  Œ∑ : g ‚àò f ~ id
  Œ∑ (a , b) = √ó-pair‚Åº (Œ∑‚ÇÅ a , refl)
  Œµ : f ‚àò g ~ id
  Œµ (a' , b) = √ó-pair‚Åº (Œµ‚ÇÅ a' , refl)

√ó-equiv‚ÇÇ : B ‚âÉ B' ‚Üí A √ó B ‚âÉ A √ó B'
√ó-equiv‚ÇÇ {B = B} {B' = B'} {A = A} (f‚ÇÇ , e‚ÇÇ) = f , qinv‚Üíisequiv (g , Œ∑ , Œµ)
  where
  open qinv (isequiv‚Üíqinv e‚ÇÇ) renaming (g to g‚ÇÇ ; Œ∑ to Œ∑‚ÇÇ ; Œµ to Œµ‚ÇÇ)
  f : A √ó B ‚Üí A √ó B'
  f (a , b) = a , f‚ÇÇ b
  g : A √ó B' ‚Üí A √ó B
  g (a , b') = a , g‚ÇÇ b'
  Œ∑ : g ‚àò f ~ id
  Œ∑ (a , b) = √ó-pair‚Åº (refl , Œ∑‚ÇÇ b)
  Œµ : f ‚àò g ~ id
  Œµ (a , b') = √ó-pair‚Åº (refl , Œµ‚ÇÇ b')
